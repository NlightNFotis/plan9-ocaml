open Ocaml

(* mostly generated by ocamltarzan with: camlp4o -o /tmp/yyy.ml -I pa/ pa_type_conv.cmo pa_vof.cmo  pr_o.cmo /tmp/xxx.ml  *)

module Sha1 = struct
  let vof_t x = Ocaml.vof_string x
end

module Blob = struct
  let vof_t x = Ocaml.vof_string x
end

module Tree = struct
  open Tree
let vof_perm =
  function
  | Normal -> Ocaml.VSum (("Normal", []))
  | Exec -> Ocaml.VSum (("Exec", []))
  | Link -> Ocaml.VSum (("Link", []))
  | Dir -> Ocaml.VSum (("Dir", []))
  | Commit -> Ocaml.VSum (("Commit", []))
  
let vof_entry { perm = v_perm; name = v_name; node = v_node } =
  let bnds = [] in
  let arg = Sha1.vof_t v_node in
  let bnd = ("node", arg) in
  let bnds = bnd :: bnds in
  let arg = Ocaml.vof_string v_name in
  let bnd = ("name", arg) in
  let bnds = bnd :: bnds in
  let arg = vof_perm v_perm in
  let bnd = ("perm", arg) in let bnds = bnd :: bnds in Ocaml.VDict bnds
  
let vof_t v = Ocaml.vof_list vof_entry v
end

module Commit = struct
  let vof_t x = Ocaml.vof_string x
end

open Objects
let vof_obj =
  function
  | Blob v1 -> let v1 = Blob.vof_t v1 in Ocaml.VSum (("Blob", [ v1 ]))
  | Commit v1 -> let v1 = Commit.vof_t v1 in Ocaml.VSum (("Commit", [ v1 ]))
  | Tree v1 -> let v1 = Tree.vof_t v1 in Ocaml.VSum (("Tree", [ v1 ]))
